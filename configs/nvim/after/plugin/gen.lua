-- require("gen").setup({
-- 	model = "codeqwen:chat", -- The default model to use.
-- 	host = "gpu-ubuntu", -- The host running the Ollama service.
-- 	port = "11434", -- The port on which the Ollama service is listening.
-- 	display_mode = "float", -- The display mode. Can be "float" or "split".
-- 	show_prompt = true, -- Shows the Prompt submitted to Ollama.
-- 	show_model = true, -- Displays which model you are using at the beginning of your chat session.
-- 	quit_map = "q", -- set keymap for quit
-- 	no_auto_close = false, -- Never closes the window automatically.
-- 	init = function(options)
-- 		print("Ollama is initialized")
-- 		-- do nothing
-- 	end,
-- 	-- Function to initialize Ollama
-- 	command = function(options)
-- 		return "curl --silent --no-buffer -X POST http://"
-- 			.. options.host
-- 			.. ":"
-- 			.. options.port
-- 			.. "/api/chat -d $body"
-- 	end,
-- 	-- The command for the Ollama service. You can use placeholders $prompt, $model and $body (shellescaped).
-- 	-- This can also be a command string.
-- 	-- The executed command must return a JSON object with { response, context }
-- 	-- (context property is optional).
-- 	-- list_models = '<omitted lua function>', -- Retrieves a list of model names
-- 	debug = false, -- Prints errors and the command which is run.
-- })
-- -- local function capture_command_output(command)
-- -- 	local output = ""
-- -- 	local pipe = io.popen(command, "r")
-- -- 	if pipe then
-- -- 		for line in pipe:lines() do
-- -- 			output = output .. line .. "\n"
-- -- 		end
-- -- 		pipe:close()
-- -- 	else
-- -- 		print("Failed to execute command")
-- -- 	end
-- -- 	return output
-- -- end
--
-- -- Shell command to list all functions and types in .go files
-- -- local command = "find internal -name '*.go' -exec cat {} \\; | grep -e 'func (' -e 'type '"
-- --
-- -- -- Define the prompt with the captured output
-- -- require("gen").prompts["Context"] = {
-- -- 	prompt = "Act on the following instruction `$input` while focusing on `$text`. Here are all functions and types from the same project as a reference: \n```\n"
-- -- 		.. capture_command_output(command)
-- -- 		.. "\n```",
-- -- 	replace = false,
-- -- 	-- extract = "```$filetype\n(.-)```"
-- -- }
